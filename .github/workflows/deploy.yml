name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # --------------------
  # 1) TEST
  # --------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    env:
      working-directory: backend
      ENV: test
      TEST_DATABASE_USER: postgres
      TEST_DATABASE_PASSWORD: finalyear
      TEST_DATABASE_NAME: pharmacy
      TEST_DATABASE_HOST: localhost
      TEST_DATABASE_PORT: 5432
      PHARMACY_API_HOST: ${{ secrets.PHARMACY_API_HOST }}
      PHARMACY_API_PORT: ${{ secrets.PHARMACY_API_PORT }}
      SESSION_NAME: ${{ secrets.SESSION_NAME }}
      SESSION_DURATION: ${{ secrets.SESSION_DURATION }}
      DO_HOST: ${{ secrets.DO_HOST }}
      DO_USER: ${{ secrets.DO_USER }}
      DO_SSH_KEY: ${{ secrets.DO_SSH_KEY }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: finalyear
          POSTGRES_DB: pharmacy
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        working-directory: backend
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest tests/ -v --disable-warnings

  # --------------------
  # 2) DEPLOY (runs after test)
  # --------------------
  deploy:
    name: Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: test   # only run if test job succeeds

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Deploy to Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DO_HOST }} << 'EOF'
          echo "Pulling latest code..."
          cd /root/pharmacy_app
          git pull origin main

          echo "Checking Docker service status..."
          if ! systemctl is-active --quiet docker; then
            echo "Docker is not running. Attempting to start..."
            systemctl start docker
          fi

          echo "Docker service status:"
          systemctl status docker --no-pager | head -n 10

          echo "Testing Docker daemon access..."
          if ! docker ps > /dev/null 2>&1; then
            echo "ERROR: Docker daemon is still unreachable. Aborting deployment."
            exit 1
          fi

          echo "Bringing up containers..."
          docker compose down
          docker compose up -d --build
          EOF
